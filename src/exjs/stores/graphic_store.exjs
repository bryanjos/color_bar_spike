defmodule Stores.GraphicStore do
  JS.import Immutable, "immutable"
  JS.import Delorean, "delorean"

  import Values.Colors
  import Values.Tools, except: [:crayon]

  alias Values.Sizes
  alias Values.Tools

  def create_store() do
    Delorean.Flux.createStore(%{ 
      "data" => %{
        "paint" => false,
        "clickX" => [],
        "clickY" => [],
        "clickDrag" => [],
        "clickColor" => [],
        "clickSize" => [],
        "clickTool" => [],
        "currentColor" => black(),
        "currentSize" => Sizes.small(),
        "currentTool" => marker()   
      },

      "startPainting" => fn(_) -> 
        JS.update(this.data, "paint", true)
        this.emit("change") 
      end, 

      "stopPainting" => fn(_) -> 
        JS.update(this.data, "paint", false)
        this.emit("change") 
      end, 

      "addPoint" => fn(%{"x" => x, "y" => y, "dragging" => dragging}) ->
        JS.update(this.data, "clickX", Enum.concat(this.data.clickX, [x] ))
        JS.update(this.data, "clickY", Enum.concat(this.data.clickY, [y] ))
        JS.update(this.data, "clickDrag", Enum.concat(this.data.clickDrag, [dragging] ))
        JS.update(this.data, "clickSize", Enum.concat(this.data.clickSize, [this.data.currentSize] ))

        if this.data.currentTool == eraser() do
          JS.update(this.data, "clickColor", Enum.concat(this.data.clickColor, [white()] ))
        else
          JS.update(this.data, "clickColor", Enum.concat(this.data.clickColor, [this.data.currentColor] ))
        end
        
        this.emit("change") 
      end,

      "changeColor" => fn(color) ->
        JS.update(this.data, "currentColor", color)
        this.emit("change") 
      end,

      "changeSize" => fn(size) ->
        JS.update(this.data, "currentSize", size)
        this.emit("change") 
      end,

      "actions" => %{ 
        "startPainting" => "startPainting",
        "stopPainting" => "stopPainting",
        "addPoint" => "addPoint",
        "changeColor" => "changeColor",
        "changeSize" => "changeSize"
      }

    })
  end
end
