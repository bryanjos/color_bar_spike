defmodule Stores.Store do
  import Values.Colors
  alias Values.Sizes

  def init() do
    Agent.start(fn ->

    %{
      "subscribers" => [],
      "state" => %{
        "paint" => false,
        "clickX" => [],
        "clickY" => [],
        "clickDrag" => [],
        "clickColor" => [],
        "clickSize" => [],
        "clickTool" => [],
        "currentColor" => black(),
        "currentSize" => Sizes.small() 
      }
    }

    end, 
    [name: __MODULE__])
  end

  def get() do
    Agent.get(__MODULE__, fn(x) -> x.state end)
  end

  def subscribe(sub_fn) do
    Agent.update(__MODULE__, fn(x) -> %{ x | "subscribers" => x.subscribers ++ [sub_fn] } end)
  end

  def dispatch(action) do
    Agent.update(__MODULE__, fn(x) -> 
      %{ x | "state" => graphics(x.state, action) } 
    end)

    subscribers = Agent.get(__MODULE__, fn(x) -> x.subscribers end)

    Enum.each(subscribers, fn(sub_fn) ->
      sub_fn()
    end)
  end

  defp graphics(state, %{"type" => :addPoint, "point" => %{"x" => x, "y" => y, "dragging" => dragging}}) do
      %{state |
      "clickX" => state.clickX ++ [x],
      "clickY" => state.clickY ++ [y],
      "clickDrag" => state.clickDrag ++ [dragging],
      "clickSize" => state.clickSize ++ [state.currentSize],
      "clickColor" => state.clickColor ++ [state.currentColor],
      }
  end

  defp graphics(state, %{ "type" => :changeColor, "color" => color }) do
    %{state | "currentColor" => color }
  end

  defp graphics(state, %{ "type" => :changeSize, "size" => size }) do
     %{state | "currentSize" => size }
  end

  defp graphics(state, %{ "type" => :startPainting }) do
    %{state | "paint" => true }
  end

  defp graphics(state, %{ "type" => :stopPainting }) do
    %{state | "paint" => false }
  end

end