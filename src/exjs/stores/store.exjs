defmodule Stores.Store do
  import Values.Colors
  import Values.Tools, except: [:crayon]

  alias Values.Sizes
  alias Values.Tools

  defp new_state() do
    %{
      "paint" => false,
      "clickX" => [],
      "clickY" => [],
      "clickDrag" => [],
      "clickColor" => [],
      "clickSize" => [],
      "clickTool" => [],
      "currentColor" => black(),
      "currentSize" => Sizes.small(),
      "currentTool" => marker()   
    }
  end

  def graphics(_, %{"type" => "@@redux/INIT" }) do
    console.log("init")
    new_state()
  end

  def graphics(state, %{"type" => :addPoint, "point" => %{"x" => x, "y" => y, "dragging" => dragging}}) do
    console.log(state)

      %{state |
      "clickX" => state.clickX ++ [x],
      "clickY" => state.clickY ++ [y],
      "clickDrag" => state.clickDrag ++ [dragging],
      "clickSize" => state.clickSize ++ [state.currentSize],
      "clickColor" => state.clickColor ++ [state.currentColor],
      }
  end

  def graphics(state, %{ "type" => :changeColor, "color" => color }) do
    %{state | "currentColor" => color }
  end

  def graphics(state, %{ "type" => :changeSize, "size" => size }) do
     %{state | "currentSize" => size }
  end

  def graphics(state, %{ "type" => :startPainting }) do
    console.log(state)

    %{state | "paint" => true }
  end

  def graphics(state, %{ "type" => :stopPainting }) do
    console.log(state)

    %{state | "paint" => false }
  end
  
end